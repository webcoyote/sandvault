#!/usr/bin/env bash
# Script to install git hooks from git-hooks directory to .git/hooks
set -Eeuo pipefail
trap 'echo "${BASH_SOURCE[0]}: line $LINENO: $BASH_COMMAND: exitcode $?"' ERR
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HOOKS_DIR="$SCRIPT_DIR/git-hooks"

# Use rev-parse to support worktrees
GIT_HOOKS_DIR="$(git rev-parse --git-common-dir)/hooks"

# Check if git-hooks directory exists
if [ ! -d "$HOOKS_DIR" ]; then
    echo "Error: $HOOKS_DIR directory not found"
    exit 1
fi

# Check if .git/hooks directory exists
if [ ! -d "$GIT_HOOKS_DIR" ]; then
    echo "Error: $GIT_HOOKS_DIR directory not found (are you in a git repository?)"
    exit 1
fi

# Process each file in git-hooks directory
for hook_file in "$HOOKS_DIR"/*; do
    if [ -f "$hook_file" ]; then
        hook_name=$(basename "$hook_file")
        target_file="$GIT_HOOKS_DIR/$hook_name"
        
        # Check if target file exists
        if [ -f "$target_file" ]; then
            # Compare files to see if they're identical
            if cmp -s "$hook_file" "$target_file"; then
                # Files are identical, silently skip
                continue
            else
                # Files differ, ask for confirmation
                echo -n "File $target_file already exists and differs. Overwrite? (y/N): "
                read -r response
                if [[ ! "$response" =~ ^[Yy]$ ]]; then
                    echo "Skipping $hook_name"
                    continue
                fi
            fi
        fi
        
        # Copy the file and make it executable
        cp "$hook_file" "$target_file"
        chmod +x "$target_file"
        echo "Installed hook: $hook_name"
    fi
done
